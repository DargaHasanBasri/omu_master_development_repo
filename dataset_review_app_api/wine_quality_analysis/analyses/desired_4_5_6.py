def analyze_desired_4_5_6(data):
    """
    desired 4-5-6 analizleri:
    4) Veri kÃ¼mesi iÃ§erisindeki Ã¶rnek sayÄ±sÄ±
    5) Eksik / boÅŸ / yanlÄ±ÅŸ deÄŸer kontrolÃ¼
    6) Ã–znitelik sayÄ±sÄ± ve veri tipi
    """

    # 4) Veri kÃ¼mesi iÃ§erisindeki Ã¶rnek sayÄ±sÄ±
    num_samples = data.shape[0]
    sample_info = f"Veri kÃ¼mesinde toplam {num_samples} Ã¶rnek bulunmaktadÄ±r."

    # 5) Eksik / boÅŸ / yanlÄ±ÅŸ deÄŸer kontrolÃ¼
    missing_values = data.isnull().sum().to_dict()
    total_missing = sum(missing_values.values())
    if total_missing == 0:
        missing_summary = "Veri kÃ¼mesinde eksik deÄŸer bulunmamaktadÄ±r."
    else:
        missing_summary = f"Veri kÃ¼mesinde toplam {total_missing} eksik deÄŸer bulunmaktadÄ±r."

    # 6) Ã–znitelik sayÄ±sÄ± ve veri tipi
    num_features = data.shape[1]
    feature_info = {
        "toplam_oz_nitelik": num_features,
        "oz_nitelikler": {col: str(dtype) for col, dtype in data.dtypes.items()}
    }

    # ğŸ”¹ JSON formatÄ±nda, baÅŸlÄ±klarÄ±yla birlikte dÃ¶nelim:
    return {
        "steps": [
            {
                "title": "4) Veri kÃ¼mesi iÃ§erisinde kaÃ§ tane Ã¶rnek yer almaktadÄ±r?",
                "content": sample_info
            },
            {
                "title": "5) Veri kÃ¼mesinde boÅŸ/eksik/yanlÄ±ÅŸ deÄŸer var mÄ±?",
                "content": {
                    "eksik_deger_sayisi": missing_values,
                    "ozet": missing_summary
                }
            },
            {
                "title": "6) Veri kÃ¼mesinde kaÃ§ adet Ã¶znitelik vardÄ±r? Bu Ã¶znitelikler hangi yapÄ±dadÄ±r?",
                "content": feature_info
            }
        ]
    }
